from random import random
import matplotlib.pyplot as plt

class Produto():
    def __init__(self, nome, espaco, valor):
        self.nome=nome
        self.espaco=espaco
        self.valor=valor
        
class Individuo():
    def __init__(self, espacos, valores, limites_espacos, geracao=0):
        self.espacos=espacos
        self.valores=valores
        self.limites_espacos=limites_espacos
        self.nota_avaliacao=0
        self.espaco_usado=0
        self.geracao=geracao
        self.cromossomo=[]
        
        for i in range(len(espacos)):
            if random()< 0.5: #probabilidade 
                self.cromossomo.append("0")
            else:
                self.cromossomo.append("1")
                
    def avaliacao(self):
        nota = 0
        soma_espacos=0
        #percorre todos o campo que estao os cromossomos
        for i in range(len(self.cromossomo)):
            if self.cromossomo[i]== '1':
                nota += self.valores[i]
                soma_espacos+= self.espacos[i]
            if soma_espacos > self.limites_espacos:
                nota=1
            self.nota_avaliacao=nota
            self.espaco_usado=soma_espacos
            
    def crossover(self, outro_individuo):
        #vai gerar um aleatorio que vai multiplicar com o tamanho do cromossomo(14)
        corte = round(random() * len(self.cromossomo))
            
        #primeira parte dos cromossomos do ind1 com a 2 parte do ind2
        filho1=outro_individuo.cromossomo[0:corte] + self.cromossomo[corte::]
        filho2=self.cromossomo[0:corte] + outro_individuo.cromossomo[corte::]
        
        filhos= [Individuo(self.espacos, self.valores, self.limites_espacos, self.geracao+1), 
                Individuo(self.espacos, self.valores, self.limites_espacos, self.geracao+1)]
            
        filhos[0].cromossomo=filho1
        filhos[1].cromossomo=filho2
            
        return filhos
    
    
    def mutacao(self, taxa_mutacao):
        #print('Antes %s' % self.cromossomo)
        for i in range(len(self.cromossomo)):
            if random() < taxa_mutacao:
                if self.cromossomo[i]=='1':
                    self.cromossomo[i]= '0'
                else:
                    self.cromossomo[i]='1'
        #print('Depois %s' % self.cromossomo)
        return self
    

class AlgoritmoGenetico():
    def __init__(self, tamanho_populacao):
        self.tamanho_populacao=tamanho_populacao
        self.populacao=[]
        self.geracao=0
        self.melhor_solucao=0
        #para o grafico
        self.lista_solucoes=[]
        
        
    def inicializa_populacao(self, espacos, valores, limites_espacos):
        for i in range(self.tamanho_populacao):
            self.populacao.append(Individuo(espacos, valores, limites_espacos))
        self.melhor_solucao=self.populacao[0]
        
    def ordena_populacao(self):
        self.populacao = sorted(self.populacao, key=lambda populacao: populacao.nota_avaliacao, 
                                reverse=True)
        
    def melhor_individuo(self, individuo):
        if individuo.nota_avaliacao > self.melhor_solucao.nota_avaliacao:
            self.melhor_solucao=individuo
            
    def soma_avaliacoes(self):
        soma=0
        for individuo in self.populacao:
            soma += individuo.nota_avaliacao
        return soma
    
    def seleciona_pai(self, soma_avaliacoes):
        pai=-1
        valor_sorteado= random()  * soma_avaliacoes
        soma=0
        i=0
        while i < len(self.populacao) and soma< valor_sorteado:
            soma+= self.populacao[i].nota_avaliacao
            pai += 1
            i += 1
        return pai
    
    def visualiza_geracao(self):
        melhor = self.populacao[0] #como ja esta ordenado, então a melhor solucao vai estar no 0
        print('G: %s -> Valor: %s Espaço: %s Cromossomo: %s' % (self.populacao[0].geracao,
                                                              melhor.nota_avaliacao,
                                                              melhor.espaco_usado,
                                                              melhor.cromossomo))
        
    def resolver(self, taxa_mutacao, numero_geracoes, espacos, valores, limites_espacos):
        self.inicializa_populacao(espacos, valores, limites_espacos)
        
        for individuo in self.populacao:
            individuo.avaliacao()
            
        self.ordena_populacao()
        #para o grafico
        self.melhor_solucao =  self.populacao[0]
        self.lista_solucoes.append(self.melhor_solucao.nota_avaliacao)
        
        
        self.visualiza_geracao()
        
        for geracao in range(numero_geracoes):
            soma_avaliacao = self.soma_avaliacoes() 
            nova_populacao = []
            
            for individuos_gerados in range(0, self.tamanho_populacao, 2):
                pai1= self.seleciona_pai(soma_avaliacao)
                pai2= self.seleciona_pai(soma_avaliacao)
                
                filhos = self.populacao[pai1].crossover(self.populacao[pai2])
                
                nova_populacao.append(filhos[0].mutacao(taxa_mutacao))
                nova_populacao.append(filhos[1].mutacao(taxa_mutacao))
                
            self.populacao = list(nova_populacao) #sobrescrevi a populacao anriga
            
            for individuo in self.populacao:
                individuo.avaliacao()
            
            self.ordena_populacao()
            
            self.visualiza_geracao()
            
            melhor = self.populacao[0]
            
            #para o grafico 
            self.lista_solucoes.append(melhor.nota_avaliacao)

            
            
            self.melhor_individuo(melhor)
            
        print('\nMelhor solução -> G: %s Valor: %s Espaço: %s Cromossomo: %s' %
              (self.melhor_solucao.geracao, 
               self.melhor_solucao.nota_avaliacao,
               self.melhor_solucao.espaco_usado,
               self.melhor_solucao.cromossomo))
        return self.melhor_solucao.cromossomo
             
        


if __name__ == '__main__':
    lista_produtos = []
    lista_produtos.append(Produto("Geladeira Dako", 0.751, 999.90))
    lista_produtos.append(Produto("Iphone 6", 0.0000899, 2911.12))
    lista_produtos.append(Produto("TV 55' ", 0.400, 4346.99))
    lista_produtos.append(Produto("TV 50' ", 0.290, 3999.90))
    lista_produtos.append(Produto("TV 42' ", 0.200, 2999.00))
    lista_produtos.append(Produto("Notebook Dell", 0.00350, 2499.90))
    lista_produtos.append(Produto("Ventilador Panasonic", 0.496, 199.90))
    lista_produtos.append(Produto("Microondas Electrolux", 0.0424, 308.66))
    lista_produtos.append(Produto("Microondas LG", 0.0544, 429.90))
    lista_produtos.append(Produto("Microondas Panasonic", 0.0319, 299.29))
    lista_produtos.append(Produto("Geladeira Brastemp", 0.635, 849.00))
    lista_produtos.append(Produto("Geladeira Consul", 0.870, 1199.89))
    lista_produtos.append(Produto("Notebook Lenovo", 0.498, 1999.90))
    lista_produtos.append(Produto("Notebook Asus", 0.527, 3999.00))
    #for produto in lista_produtos:
        #print(produto.nome)
        
        
            
    espacos=[]
    valores=[]
    nomes=[]
    
    for produto in lista_produtos:
        espacos.append(produto.espaco)
        valores.append(produto.valor)
        nomes.append(produto.nome)
        
    limite = 3        
    tamanho_populacao=20
    taxa_mutacao = 0.01
    numero_geracoes=100
    
    #cria a primeira populacao
    ag=AlgoritmoGenetico(tamanho_populacao)
    resultado = ag.resolver(taxa_mutacao, numero_geracoes, espacos, valores, limite )
    
    for i in range(len(lista_produtos)):
        if resultado[i] == '1':
            print('Nome: %s R$ %s' % (lista_produtos[i].nome, 
                                      lista_produtos[i].valor))
       
        
    '''for valor in ag.lista_solucoes:
        print(valor)'''
    plt.plot(ag.lista_solucoes)
    plt.title('Acompanhamento')
    plt.show()
    
    
    
    #print('Soma das avaliacoes %s' % soma)
    
    
    '''
    for i in range (ag.tamanho_populacao):
        print('***Individuo %s ***\n' % i, 
              'Espacos = %s \n' %str(ag.populacao[i].espacos),
              'Valores = %s \n' %str(ag.populacao[i].valores),
              'Cromossomo = %s \n' % str(ag.populacao[i].cromossomo), 
              'Espaco usado = %s\n' %ag.populacao[i].espaco_usado,
              'Nota = %s \n' % ag.populacao[i].nota_avaliacao)
        
    '''
  
'''    
    #primeiro individuo
    individuo1= Individuo(espacos, valores, limite)
    #print('Espacos = %s' % str(individuo1.espacos))
    #print('Valores = %s'  % str(individuo1.valores))
    #print('Cromossomo = %s' % str(individuo1.cromossomo)),
    print('\nIndividuo 1')
    
    #print('\nComponentes da carga')
    for i in range(len(lista_produtos)):
        if individuo1.cromossomo[i]=='1':
            print('Nome: %s R$ %s ' % (lista_produtos[i].nome, lista_produtos[i].valor))
            
    individuo1.avaliacao()
    print('\nNota= %s' %str(individuo1.nota_avaliacao))
    print('Espaço usado = %s' %str(individuo1.espaco_usado))
    
    
    #individuo 2
    individuo2= Individuo(espacos, valores, limite)
    #print('Espacos = %s' % str(individuo1.espacos))
    #print('Valores = %s'  % str(individuo1.valores))
    #print('Cromossomo = %s' % str(individuo1.cromossomo)),
    print('\nIndividuo 2')
    
    #print('\nComponentes da carga')
    for i in range(len(lista_produtos)):
        if individuo2.cromossomo[i]=='1':
            print('Nome: %s R$ %s ' % (lista_produtos[i].nome, lista_produtos[i].valor))
            
    individuo2.avaliacao()
    print('\nNota= %s' %str(individuo2.nota_avaliacao))
    print('Espaço usado = %s' %str(individuo2.espaco_usado))
        
        
    #passando o indivuo 2 como parametro para fazer o crossover
    individuo1.crossover(individuo2)
    
    individuo1.mutacao(0.5)
    individuo1.mutacao(0.4)
'''

    
